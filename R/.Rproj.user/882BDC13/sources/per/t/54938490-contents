library(readr)  # Para lectura de datos desde archivos CSV
library(dplyr)  # Para manipulación de datos
ruta_archivo <- 'A:/MAESTRÍA EN BIG DATA Y DATA ANALYTICS/Análisis e interpretación de datos/ACTIVIDAD 1/archive'
datos <- read_csv(ruta_archivo)
ruta_archivo <- 'A:/MAESTRÍA EN BIG DATA Y DATA ANALYTICS/Análisis e interpretación de datos/ACTIVIDAD 1/archive/countries of the world.csv'
datos <- read_csv(ruta_archivo)
especificacion_columnas <- spec(read_csv(ruta_archivo))
print(especificacion_columnas)
print(datos)
matriz_cor <- cor(datos[, -1], method = "pearson")
columnas_seleccionadas <- c("GDP ($ per capita)", "Literacy (%)", "Population",
"Service")
datos_seleccionados <- datos[, columnas_seleccionadas]
matriz_cor <- cor(datos_seleccionados, method = "pearson")
datos$`Literacy (%)` <- as.numeric(gsub(",", ".", gsub("%", "", datos$`Literacy (%)`)))
# Convertir 'Service' a numérico si es posible
datos$Service <- as.numeric(gsub(",", ".", gsub("%", "", datos$Service)))
# Convertir 'GDP ($ per capita)' a numérico
datos$`GDP ($ per capita)` <- as.numeric(gsub(",", "", datos$`GDP ($ per capita)`))
# Calcular la matriz de correlación de Pearson
matriz_cor <- cor(datos[c("GDP ($ per capita)", "Literacy (%)", "Population", "Service")], method = "pearson", use = "complete.obs")
# Mostrar la matriz de correlación con nombres de columnas
colnames(matriz_cor) <- c("GDP", "Literacy", "Population", "Service")
print(matriz_cor)
# Paso 1: Ordenar los datos por PIB per cápita en orden ascendente
datos_ordenados <- datos[order(datos$`GDP ($ per capita)`), ]
# Paso 2: Seleccionar las primeras tres filas
datos_tres_paises <- head(datos_ordenados, 3)
datos$`Literacy (%)` <- as.numeric(gsub(",", ".", gsub("%", "", datos$`Literacy (%)`)))
# Convertir 'Service' a numérico si es posible
datos_ordenados$Service <- as.numeric(gsub(",", ".", gsub("%", "", datos_ordenados$Service)))
# Convertir 'GDP ($ per capita)' a numérico
datos_ordenados$`GDP ($ per capita)` <- as.numeric(gsub(",", "", datos_ordenados$`GDP ($ per capita)`))
# Calcular la matriz de correlación de Pearson
matriz_cor <- cor(datos_ordenados[c("GDP ($ per capita)", "Literacy (%)", "Population", "Service")], method = "pearson", use = "complete.obs")
# Mostrar la matriz de correlación con nombres de columnas
colnames(matriz_cor) <- c("GDP", "Literacy", "Population", "Service")
print(matriz_cor)
# Paso 1: Ordenar los datos por PIB per cápita en orden ascendente
datos_ordenados <- datos[order(datos$`GDP ($ per capita)`), ]
# Paso 2: Seleccionar las primeras tres filas
datos_tres_paises <- head(datos_ordenados, 3)
datos$`Literacy (%)` <- as.numeric(gsub(",", ".", gsub("%", "", datos$`Literacy (%)`)))
# Convertir 'Service' a numérico si es posible
datos_ordenados$Service <- as.numeric(gsub(",", ".", gsub("%", "", datos_ordenados$Service)))
# Convertir 'GDP ($ per capita)' a numérico
datos_ordenados$`GDP ($ per capita)` <- as.numeric(gsub(",", "", datos_ordenados$`GDP ($ per capita)`))
# Calcular la matriz de correlación de Pearson
matriz_cor <- cor(datos_ordenados[c("GDP ($ per capita)", "Literacy (%)", "Population", "Service")], method = "pearson", use = "complete.obs")
# Mostrar la matriz de correlación con nombres de columnas
colnames(matriz_cor) <- c("GDP", "Literacy", "Population", "Service")
print(matriz_cor)
# Paso 1: Ordenar los datos por PIB per cápita en orden ascendente
datos_ordenados <- datos[order(datos$`GDP ($ per capita)`), ]
# Paso 2: Seleccionar las primeras tres filas
datos_tres_paises <- head(datos_ordenados, 3)
datos_tres_paises$`Literacy (%)` <- as.numeric(gsub(",", ".", gsub("%", "", datos_tres_paises$`Literacy (%)`)))
# Convertir 'Service' a numérico si es posible
datos_tres_paises$Service <- as.numeric(gsub(",", ".", gsub("%", "", datos_tres_paises$Service)))
# Convertir 'GDP ($ per capita)' a numérico
datos_tres_paises$`GDP ($ per capita)` <- as.numeric(gsub(",", "", datos_tres_paises$`GDP ($ per capita)`))
# Calcular la matriz de correlación de Pearson
matriz_cor <- cor(datos_tres_paises[c("GDP ($ per capita)", "Literacy (%)", "Population", "Service")], method = "pearson", use = "complete.obs")
# Mostrar la matriz de correlación con nombres de columnas
colnames(matriz_cor) <- c("GDP", "Literacy", "Population", "Service")
print(matriz_cor)
print(datos_tres_paises)
# Paso 1: Ordenar los datos por PIB per cápita en orden ascendente
datos_ordenados <- datos[order(datos$`GDP ($ per capita)`), ]
# Paso 2: Seleccionar las primeras tres filas
datos_tres_paises <- head(datos_ordenados, 4)
datos_tres_paises$`Literacy (%)` <- as.numeric(gsub(",", ".", gsub("%", "", datos_tres_paises$`Literacy (%)`)))
datos_tres_paises$`Pop. Density (per sq. mi.)` <- as.numeric(gsub(",", ".", gsub("%", "", datos_tres_paises$`Pop. Density (per sq. mi.)`)))
# Convertir 'Service' a numérico si es posible
datos_tres_paises$Service <- as.numeric(gsub(",", ".", gsub("%", "", datos_tres_paises$Service)))
# Convertir 'GDP ($ per capita)' a numérico
datos_tres_paises$`GDP ($ per capita)` <- as.numeric(gsub(",", "", datos_tres_paises$`GDP ($ per capita)`))
# Calcular la matriz de correlación de Pearson
matriz_cor <- cor(datos_tres_paises[c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi", "Service")], method = "pearson", use = "complete.obs")
# Paso 1: Ordenar los datos por PIB per cápita en orden ascendente
datos_ordenados <- datos[order(datos$`GDP ($ per capita)`), ]
# Paso 2: Seleccionar las primeras tres filas
datos_tres_paises <- head(datos_ordenados, 4)
datos_tres_paises$`Literacy (%)` <- as.numeric(gsub(",", ".", gsub("%", "", datos_tres_paises$`Literacy (%)`)))
datos_tres_paises$`Pop. Density (per sq. mi.)` <- as.numeric(gsub(",", ".", gsub("%", "", datos_tres_paises$`Pop. Density (per sq. mi.)`)))
# Convertir 'Service' a numérico si es posible
datos_tres_paises$Service <- as.numeric(gsub(",", ".", gsub("%", "", datos_tres_paises$Service)))
# Convertir 'GDP ($ per capita)' a numérico
datos_tres_paises$`GDP ($ per capita)` <- as.numeric(gsub(",", "", datos_tres_paises$`GDP ($ per capita)`))
# Calcular la matriz de correlación de Pearson
matriz_cor <- cor(datos_tres_paises[c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi", "Service")], method = "pearson", use = "complete.obs")
datos_tres_paises$`Pop. Density (per sq. mi.)` <- as.numeric(gsub(",", ".", datos_tres_paises$`Pop. Density (per sq. mi.)`))
# Calcular la matriz de correlación de Pearson
matriz_cor <- cor(datos_tres_paises[c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi", "Service")], method = "pearson", use = "complete.obs")
# Calcular la matriz de correlación de Pearson
matriz_cor <- cor(datos_tres_paises[c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi", "Service")], method = "pearson", use = "complete.obs")
ruta_archivo <- 'A:/MAESTRÍA EN BIG DATA Y DATA ANALYTICS/Análisis e interpretación de datos/ACTIVIDAD 1/archive/countries of the world.csv'
datos <- read_csv(ruta_archivo)
especificacion_columnas <- spec(read_csv(ruta_archivo))
print(especificacion_columnas)
datos_ordenados <- datos[order(datos$`GDP ($ per capita)`), ]
datos_tres_paises <- head(datos_ordenados, 4)
datos_tres_paises$`Literacy (%)` <- as.numeric(gsub(",", ".", gsub("%", "", datos_tres_paises$`Literacy (%)`)))
datos_tres_paises$`Pop. Density (per sq. mi.)` <- as.numeric(gsub(",", ".", datos_tres_paises$`Pop. Density (per sq. mi.)`))
# Convertir 'Service' a numérico si es posible
datos_tres_paises$Service <- as.numeric(gsub(",", ".", gsub("%", "", datos_tres_paises$Service)))
# Convertir 'GDP ($ per capita)' a numérico
datos_tres_paises$`GDP ($ per capita)` <- as.numeric(gsub(",", "", datos_tres_paises$`GDP ($ per capita)`))
# Calcular la matriz de correlación de Pearson
matriz_cor <- cor(datos_tres_paises[c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi", "Service")], method = "pearson", use = "complete.obs")
matriz_cor <- cor(datos_tres_paises[c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi)", "Service")], method = "pearson", use = "complete.obs")
datos_tres_paises$`GDP ($ per capita)` <- as.numeric(gsub(",", "", datos_tres_paises$`GDP ($ per capita)`))
matriz_cor <- cor(datos_tres_paises[c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi.)", "Service")], method = "pearson", use = "complete.obs")
colnames(matriz_cor) <- c("GDP", "Literacy", "Population density", "Service")
print(matriz_cor)
mediana_variable <- median(datos_tres_paises$Variable)
print(paste("Mediana de la Variable:", mediana_variable))
mediana_per_capita <- median(datos_tres_paises$`GDP ($ per capita)`)
print(paste("Mediana del PIB per cápita:", mediana_pib_per_capita))
mediana_per_capita <- median(datos_tres_paises$`GDP ($ per capita)`)
print(paste("Mediana del PIB per cápita:", mediana_per_capita))
datos_tres_paises <- head(datos_ordenados, 4)
mediana_per_capita <- median(datos_tres_paises$`GDP ($ per capita)`)
print(paste("Mediana del PIB per cápita:", mediana_per_capita))
#media truncada
library(WRS2)
install.packages("WRS2")
library(WRS2)
media_truncada_gdp <- trim.mean(datos_tres_paises$`GDP ($ per capita)`, trim = 0.1)  # Ajusta el porcentaje según tus necesidades
library(WRS2)
media_truncada_gdp <- trim.mean(datos_tres_paises$`GDP ($ per capita)`, trim = 0.1)  # Ajusta el porcentaje según tus necesidades
media_truncada_gdp <- meanW(datos_tres_paises$`GDP ($ per capita)`, tr = 0.1)  # Ajusta el trim según tus necesidades
# Definir el porcentaje de recorte (trim)
trim_percentage <- 0.1
# Calcular los cuantiles para recortar
lower_quantile <- quantile(datos_tres_paises$`GDP ($ per capita)`, trim_percentage / 2)
upper_quantile <- quantile(datos_tres_paises$`GDP ($ per capita)`, 1 - trim_percentage / 2)
# Realizar el recorte y calcular la media
media_truncada_gdp <- mean(datos_tres_paises$`GDP ($ per capita)`, na.rm = TRUE,
trim = c(lower_quantile, upper_quantile))
summary_por_grupo <- by(datos_tres_paises[, c("GDP ($ per capita)", "Literacy", "Population", "Service")],
datos_tres_paises$Grupo, summary)
colnames(matriz_cor) <- c("GDP", "Literacy", "Population density", "Service")
print(matriz_cor)
summary_por_grupo <- by(datos_tres_paises[, c("GDP ($ per capita)", "Literacy", "Population", "Service")],
summary_por_grupo <- by(datos_tres_paises[, c("GDP ($ per capita)", "Literacy", "Population", "Service")],
datos_tres_paises$Grupo, summary)
print(summary_por_grupo)
summary_por_grupo <- by(datos_tres_paises[, c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi.)", "Service")],
datos_tres_paises$Grupo, summary)
summary_por_grupo <- by(datos_tres_paises[, c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi.)", "Service")],
datos_tres_paises$Country, summary)
print(summary_por_grupo)
boxplot(GDP ~ Country, data = datos_tres_paises, col = "lightblue", main = "Comparación de PIB per cápita por País")
boxplot(GDP ~ Country, data = datos_tres_paises, col = "lightblue", main = "Comparación de PIB per cápita por País")
boxplot(`GDP ($ per capita)` ~ Country, data = datos_tres_paises, col = "lightblue", main = "Comparación de PIB per cápita por País")
#barras
barplot(height = datos_tres_paises$`GDP ($ per capita)`, names.arg = datos_tres_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_diez_paises$`GDP ($ per capita)`, names.arg = datos_tres_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
datos_diez_paises <- head(datos_ordenados, 10)
barplot(height = datos_diez_paises$`GDP ($ per capita)`, names.arg = datos_tres_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_diez_paises$`GDP ($ per capita)`, names.arg = datos_tres_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_diez_paises$`GDP ($ per capita)`, names.arg = datos_diez_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_diez_paises$`GDP ($ per capita)`, names.arg = datos_diez_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_tres_paises$`GDP ($ per capita)`, names.arg = datos_tres_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_diez_paises$`GDP ($ per capita)`, names.arg = datos_diez_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_tres_paises$`GDP ($ per capita)`, names.arg = datos_tres_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_diez_paises$`GDP ($ per capita)`, names.arg = datos_diez_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
par(mar = c(5, 10, 4, 2))  # Ajusta los márgenes para proporcionar más espacio horizontal
barplot(height = datos_diez_paises$`GDP ($ per capita)`,
names.arg = datos_diez_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
par(mar = c(5, 10, 4, 2))  # Ajusta los márgenes para proporcionar más espacio horizontal
barplot(height = datos_diez_paises$`GDP ($ per capita)`,
names.arg = datos_diez_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_diez_paises$`GDP ($ per capita)`, names.arg = datos_diez_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_tres_paises$`GDP ($ per capita)`, names.arg = datos_tres_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
par(mar = c(5, 10, 4, 2))  # Ajusta los márgenes para proporcionar más espacio horizontal
barplot(height = datos_diez_paises$`GDP ($ per capita)`,
names.arg = datos_diez_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita")
barplot(height = datos_diez_paises$`GDP ($ per capita)`,
names.arg = datos_diez_paises$Country,
col = "lightblue", main = "Comparación de PIB per cápita por País",
xlab = "País", ylab = "PIB per cápita", las = 2)  # Las = 2 para orientación vertical
summary(datos_tres_paises)
summary(datos_tres_paises)
print(summary_por_grupo)
summary_por_grupo <- by(datos_tres_paises[, c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi.)", "Service")])
columnas_interes <- c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi.)", "Service")
summary(datos_tres_paises[, columnas_interes])
columnas_interes <- c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi.)", "Service")
datos_tres_paises[, columnas_interes] <- lapply(datos_tres_paises[, columnas_interes], as.numeric)
summary(datos_tres_paises[, columnas_interes])
columnas_interes <- c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi.)", "Service")
# Reemplazar comas por puntos en la columna "Pop. Density (per sq. mi.)"
datos_tres_paises$`Pop. Density (per sq. mi.)` <- gsub(",", ".", datos_tres_paises$`Pop. Density (per sq. mi.)`)
datos_tres_paises$`Service` <- gsub(",", ".", datos_tres_paises$`Service`)
# Convertir las columnas a tipos numéricos
datos_tres_paises[, columnas_interes] <- lapply(datos_tres_paises[, columnas_interes], as.numeric)
# Verificar la conversión
summary(datos_tres_paises[, columnas_interes])
columnas_interes <- c("GDP ($ per capita)", "Literacy (%)", "Pop. Density (per sq. mi.)", "Service")
# Reemplazar comas por puntos en la columna "Pop. Density (per sq. mi.)"
datos_tres_paises$`Pop. Density (per sq. mi.)` <- gsub(",", ".", datos_tres_paises$`Pop. Density (per sq. mi.)`)
# Convertir las columnas a tipos numéricos
datos_tres_paises[, columnas_interes] <- lapply(datos_tres_paises[, columnas_interes], as.numeric)
# Verificar la conversión
summary(datos_tres_paises[, columnas_interes])
